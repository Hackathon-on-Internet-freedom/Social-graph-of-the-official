var USER_FIELDS = ["screen_name",
                   "maiden_name",
                   "relatives",
                   "relation",
                   "home_town",
                   "schools",
                   "universities",
                   "military",
                   "career",
                   "counters"];

// Verify user id (called once).
var id_check = API.utils.resolveScreenName({
  "screen_name": Args.user_id
});
if (id_check.length == 0) {
  return {
    "error_info": "Param user_id is invalid",
  };
}
if (id_check.type != "user") {
  return {
    "error_info": "Param user_id does not correspond to a user",
  };
}

// Get user info (called once).
var user_info = API.users.get({
  "user_ids": [Args.user_id],
  "fields": USER_FIELDS
});
if (user_info.length == 0) {
  return {
    "error_info": "Unable to get user info",
  };
}
user_info = user_info[0];

// Get full list of friends (called max 2 times).
var batch;
var offset = 0;
var step = 5000;
var friends = [];
if (!user_info.is_closed) {
  do {
    batch = API.friends.get({
      "user_id": user_info.id,
      "offset": offset,
    }).items;
    friends = friends + batch;
    offset = offset + step;
  } while(batch.length == step);
}

// Get user info for all friends (called max 10 times).
var batch;
var offset = 0;
var step = 1000;
var friends_user_info = [];
if (friends.length > 0) {
  do {
    batch = API.users.get({
      "user_ids": friends.slice(offset, offset + step),
      "fields": USER_FIELDS
    });
    friends_user_info = friends_user_info + batch;
    offset = offset + step;
  } while(batch.length == step);
}

return {
  "user_info": user_info,
  "num_friends": friends_user_info.length,
  "friends_info": friends_user_info,
};
